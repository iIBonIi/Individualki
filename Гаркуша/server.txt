#include <iostream>
#include <fstream>
#include <string>
#include <thread>
#include <chrono>
#include <mutex>

std::mutex file_mutex;

double calculate_bmi(double weight, double height) {
    height /= 100.0;
    return weight / (height * height);
}

void process_client_data(const std::string& client_file, const std::string& server_file) {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(1));

        std::lock_guard<std::mutex> lock(file_mutex);

        std::ifstream client_data(client_file, std::ios::in);
        if (!client_data.is_open()) {
            std::cerr << "Не удалось открыть файл клиента." << std::endl;
            return;
        }

        std::string line;
        std::string last_line;
        while (std::getline(client_data, line)) {
            last_line = line;
        }

        client_data.close();


        if (!last_line.empty()) {
            double weight, height;
            size_t pos = last_line.find(' ');
            if (pos != std::string::npos) {
                weight = std::stod(last_line.substr(0, pos));
                height = std::stod(last_line.substr(pos + 1));


                double bmi = calculate_bmi(weight, height);


                std::ofstream server_response(server_file, std::ios::trunc);
                if (server_response.is_open()) {
                    server_response << "ИМТ: " << bmi << std::endl;
                }
                else {
                    std::cerr << "Не удалоысь открыть файл сервера." << std::endl;
                }
            }
        }
    }
}

int main() {

    setlocale(LC_ALL, "RU");

    const std::string client_file = "client_data.txt";
    const std::string server_file = "server_response.txt";


    std::thread server_thread(process_client_data, client_file, server_file);


    std::cout << "Сервер работает... Нажмите Ctrl+C для завершения." << std::endl;
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(10));
    }

    server_thread.join();

    return 0;
}
