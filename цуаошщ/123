```cpp
#include <iostream>
#include <fstream>
using namespace std;

double** readMatrixFromFile(const char* filename, int& rows, int& cols) {
    ifstream in(filename);
    if (!in.is_open()) {
        cerr << "Error opening file\n";
        return nullptr;
    }
    in >> rows >> cols;
    double** matrix = new double*[rows];
    for (int i = 0; i < rows; i++) {
        matrix[i] = new double[cols];
        for (int j = 0; j < cols; j++)
            in >> matrix[i][j];
    }
    in.close();
    return matrix;
}

void gaussianElimination(double** matrix, int rows, int cols) {
    int lead = 0;
    for (int r = 0; r < rows && lead < cols; r++) {
        int i = r;
        while (matrix[i][lead] == 0) {
            i++;
            if (i == rows) {
                i = r;
                lead++;
                if (lead == cols) break;
            }
        }
        if (lead == cols) break;

        if (i != r)
            for (int j = 0; j < cols; j++)
                swap(matrix[i][j], matrix[r][j]);

        double div = matrix[r][lead];
        for (int j = 0; j < cols; j++)
            matrix[r][j] /= div;

        for (int i = 0; i < rows; i++) {
            if (i != r) {
                double mult = matrix[i][lead];
                for (int j = 0; j < cols; j++)
                    matrix[i][j] -= mult * matrix[r][j];
            }
        }
        lead++;
    }
}

void writeMatrixToFile(const char* filename, double** matrix, int rows, int cols) {
    ofstream out(filename);
    if (!out.is_open()) {
        cerr << "Error creating output file\n";
        return;
    }
    out << rows << " " << cols << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++)
            out << matrix[i][j] << " ";
        out << endl;
    }
    out.close();
}

void freeMatrix(double** matrix, int rows) {
    for (int i = 0; i < rows; i++)
        delete[] matrix[i];
    delete[] matrix;
}

int main() {
    int rows, cols;
    double** matrix = readMatrixFromFile("input.txt", rows, cols);
    if (!matrix) return 1;

    gaussianElimination(matrix, rows, cols);
    writeMatrixToFile("output.txt", matrix, rows, cols);
    freeMatrix(matrix, rows);

    return 0;
}
```
